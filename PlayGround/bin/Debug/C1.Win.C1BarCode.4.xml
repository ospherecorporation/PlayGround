<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Win.C1BarCode.4</name>
    </assembly>
    <members>
        <member name="T:C1.Win.C1BarCode.Strings">
            <summary>
            Static class containing UI strings used by the designer.
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.C1QRCode">
            <summary>
            Creates QR barcode representations of alphanumeric values.
            </summary>
            <remarks>
            <para>To use the C1QRCode control, simply set the <see cref="P:C1.Win.C1BarCode.C1QRCode.Text"/> 
            property to the value you want to encode.</para>
            <para>The control will show the QR image. If you want to include 
            the QR image in a document, use the <see cref="P:C1.Win.C1BarCode.C1QRCode.Image"/> property 
            to retrieve an image of the barcode.</para>
            <para>The QR (Quick Response) format is one of the most popular 2D 
            barcode formats today, with free readers available for virtually 
            all smart phones.</para>
            <para>The main reasons for the popularity of the QR format are its 
            efficiency (it is very compact), flexibility (you don't need special 
            scanners to read it), and the fact that the original developer of 
            the format (the DENSO-WAVE company) made it an open and freely 
            available standard (ISO/IEC18004 and others).</para>
            <para>
            For details on the QR format, please see:
            http://www.denso-wave.com/qrcode/qrstandard-e.html and
            http://en.wikipedia.org/wiki/QR_code.
            </para>
            </remarks>
            <example>This sample shows how to use the Text property to encode
            the value "123456" as a QR barcode.
            <code>
            c1qr1.Text = "Hello QR!";
            pictureBox1.Image = c1qr1.Image;
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1BarCode.C1QRCode.ShowAboutBox">
            <summary>
            Displays the AboutBox for this control.
            </summary>
        </member>
        <member name="M:C1.Win.C1BarCode.C1QRCode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1BarCode.C1QRCode"/> control.
            </summary>
        </member>
        <member name="M:C1.Win.C1BarCode.C1QRCode.GetImage(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets an image of the QR code that represents the value in the <see cref="P:C1.Win.C1BarCode.C1QRCode.Text"/> 
            property.
            </summary>
            <param name="format">An <see cref="T:System.Drawing.Imaging.ImageFormat"/> value that specifies the type of image to be created.</param>
            <returns>An image of the barcode with the specified format.</returns>
            <remarks>
            The <see cref="P:C1.Win.C1BarCode.C1QRCode.Image"/> property can also be used to obtain an image of the barcode. However,
            it always returns a <see cref="T:System.Drawing.Imaging.Metafile"/> image of a pre-set size and with a transparent 
            background. This method returns solid-background bitmaps.
            </remarks>
        </member>
        <member name="M:C1.Win.C1BarCode.C1QRCode.GetImage(System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32)">
            <summary>
            Gets an image of the QR code that represents the value in the <see cref="P:C1.Win.C1BarCode.C1QRCode.Text"/> 
            property.
            </summary>
            <param name="format">An <see cref="T:System.Drawing.Imaging.ImageFormat"/> value that specifies the type of image to be created.</param>
            <param name="width">The width of the image, in pixels.</param>
            <param name="height">The height of the image, in pixels.</param>
            <returns>An image of the barcode with the specified format and dimensions.</returns>
            <remarks>
            The <see cref="P:C1.Win.C1BarCode.C1QRCode.Image"/> property can also be used to obtain an image of the barcode. However,
            it always returns a <see cref="T:System.Drawing.Imaging.Metafile"/> image of a pre-set size and with a transparent 
            background. This method returns solid-background bitmaps.
            </remarks>
        </member>
        <member name="M:C1.Win.C1BarCode.C1QRCode.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event.
            </summary>
            <param name="e">A PaintEventArgs that contains the event data.</param>
        </member>
        <member name="P:C1.Win.C1BarCode.C1QRCode.CodeVersion">
            <summary>
            Gets or sets the "version" of QR code to generate.
            </summary>
            <remarks>
            <para>The QR specification includes 40 "versions" of QR codes. 
            Higher versions consume more space and are able to encode more 
            information.</para>
            <para>The <see cref="T:C1.Win.C1BarCode.C1QRCode"/> control can generate QR codes
            versions one through ten only, which allow encoding up to 
            652 digits, or 395 alphanumeric characters, or 271 bytes.</para>
            <para>Set the <see cref="P:C1.Win.C1BarCode.C1QRCode.CodeVersion"/> property to zero (the default
            value) to automatically use the most compact version able to render the
            content specified in the <see cref="P:C1.Win.C1BarCode.C1QRCode.Text"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1QRCode.ErrorCorrectionLevel">
            <summary>
            Gets or sets the error correction level used to create the QR code.
            </summary>
            <remarks>
            <para>Higher levels of error correction add more redundant information to 
            the QR code, making it more resistant to damage.
            Higher levels of error correction also reduce the amount of data
            that can be encoded in a given area.</para>
            <para>The default value for this property is the lowest level, which
            produces the most compact QR codes.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1QRCode.Encoding">
            <summary>
            Gets or sets the <see cref="P:C1.Win.C1BarCode.C1QRCode.Encoding"/> used to translate
            the content in the <see cref="P:C1.Win.C1BarCode.C1QRCode.Text"/> property into binary values
            to be encoded in the QR code.
            </summary>
            <remarks>
            <para>More flexible encodings have lower capacity. The <see cref="T:C1.Win.C1BarCode.C1QRCode"/>
            control can encode up to 652 digits, or 395 alphanumeric characters, or
            271 bytes.</para>
            <para>The default value for this property is 
            <see cref="F:C1.Win.C1BarCode.Encoding.Automatic"/>, which causes the 
            control to automatically select the most compact encoding that can be 
            used based on the content specified in the <see cref="P:C1.Win.C1BarCode.C1QRCode.Text"/> 
            property.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1QRCode.SymbolSize">
            <summary>
            Gets or sets the size, in pixels, of the symbols used to build the QR image.
            </summary>
            <remarks>
            <para>Larger values will result in larger images which consume more space 
            but may be easier to for some scanners to read.</para>
            <para>The default symbol size is three pixels, which usually represents a 
            good compromise between size and readability.</para>
            <para>This property must be set to values between 2 and 10.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1QRCode.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
            <remarks>
            The background color only applies to the control. The barcode
            image that is available through the <see cref="P:C1.Win.C1BarCode.C1QRCode.Image"/> 
            property always has a transparent background.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1QRCode.ForeColor">
            <summary>
            Gets or sets the foreground color for the control.
            </summary>
            <remarks>
            The foreground color applies to the control and also to the barcode
            image that is available through the <see cref="P:C1.Win.C1BarCode.C1QRCode.Image"/> 
            property.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1QRCode.SizeMode">
            <summary>
            Gets or sets how the barcode image is displayed within the control.
            </summary>
            <remarks>
            <para>This property only affects how the barcode is displayed within
            the control. It has no effect on the actual barcode image, as returned by
            the <see cref="P:C1.Win.C1BarCode.C1QRCode.Image"/> property.</para>
            <para>In most applications, you will either center or left-align the barcode
            image within the control. Although stretching the image is possible, it may
            make it unreadable for some barcode readers.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1QRCode.Font">
            <summary>
            Overridden to remove from property window.
            </summary>
        </member>
        <member name="P:C1.Win.C1BarCode.C1QRCode.EncodingException">
            <summary>
            Gets the <see cref="T:System.Exception"/> that prevented the <see cref="P:C1.Win.C1BarCode.C1QRCode.Text"/> from being encoded.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1BarCode.C1QRCode"/> control can be used to encode up to
            652 digits, or 395 alphanumeric characters (uppercase only), or 271 bytes.</para>
            <para>If these limits are exceeded, or if any of the control properties is set
            to values that prevent the content of the <see cref="P:C1.Win.C1BarCode.C1QRCode.Text"/> property from
            being encoded, the control remains blank, and the <see cref="P:C1.Win.C1BarCode.C1QRCode.EncodingException"/>
            property contains details that explain why the code could not be generated.</para>
            </remarks>
            <example>
            The code below sets the <see cref="P:C1.Win.C1BarCode.C1QRCode.Text"/> property and shows a message in case 
            any errors are detected:
            <code>
            c1QRCode1.Text = textBox1.Text;
            label1.Text = c1QRCode1.EncodingException == null 
              ? string.Empty 
              : c1QRCode1.EncodingException.Message;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1BarCode.C1QRCode.Text">
            <summary>
            Gets or sets the value that is encoded as a barcode image.
            </summary>
        </member>
        <member name="P:C1.Win.C1BarCode.C1QRCode.Image">
            <summary>
            Gets an image of the barcode that represents the value in the <see cref="P:C1.Win.C1BarCode.C1QRCode.Text"/> 
            property.
            </summary>
            <remarks>
            <para>The <b>Image</b> property returns a <see cref="T:System.Drawing.Imaging.Metafile"/> that can be 
            inserted in reports and other documents. If the value stored in the <see cref="P:C1.Win.C1BarCode.C1QRCode.Text"/>
            property is invalid for the current encoding, the image returned is blank.</para>
            <para>Although the barcode image returned by the control is scalable, the default
            size is optimal for common barcode readers. Keep in mind that if you stretch
            the image and make it very large or very small, it may become unreadable to
            some readers.</para>
            <para>The metafile image has a transparent background and therefore cannot be 
            easily converted to a solid-background bitmap. To obtain a <see cref="T:System.Drawing.Bitmap"/> 
            image of the barcode, use the <see cref="M:C1.Win.C1BarCode.C1QRCode.GetImage(System.Drawing.Imaging.ImageFormat)"/> method instead.</para>
            </remarks>
        </member>
        <member name="T:C1.Util.Localization.StringTables">
            <summary>
            StringTables
            this class contains a single static method InitTables that populates the
            tables used by the Localizer class.
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.Encoding">
            <summary>
            Specifies the type of encoding to use (more flexible encodings consume more space).
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.Encoding.Automatic">
            <summary>
            Select encoding automatically based on the content.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.Encoding.AlphaNumeric">
            <summary>
            Encode up to 395 alpha-numeric values. Alpha-numeric values include
            digits from 0 to 9, uppercase letters from A to Z, space, 
            and the following additional characters: dollar, percentage, 
            asterisk, plus, minus, slash, and colon ([0-9][A-Z][$%*+-./:]).
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.Encoding.Numeric">
            <summary>
            Encode up to 652 numeric values.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.Encoding.Byte">
            <summary>
            Encode up to 271 bytes.
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.ErrorCorrectionLevel">
            <summary>
            Specifies the error-correction level (higher levels consume more space).
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.ErrorCorrectionLevel.L">
            <summary>
            Able to correct up to 7% damage.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.ErrorCorrectionLevel.M">
            <summary>
            Able to correct up to 15% damage.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.ErrorCorrectionLevel.Q">
            <summary>
            Able to correct up to 25% damage.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.ErrorCorrectionLevel.H">
            <summary>
            Able to correct up to 30% damage.
            </summary>
        </member>
        <member name="M:C1.Win.C1BarCode.QRCodeEncoder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.BarDirectionEnum">
            <summary>
            Specifies the direction of the barcode
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.BarDirectionEnum.Normal">
            <summary>
            The barcode is rendered in the horizontal direction.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.BarDirectionEnum.Up">
            <summary>
            The barcode is rendered from the bottom up.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.BarDirectionEnum.Down">
            <summary>
            The barcode is rendered from the top down.
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.CodeTypeEnum">
            <summary>
            Specifies the type of barcode to be generated by the C1BarCode control.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1BarCode.CodeTypeEnum"/> enumeration represents the different types 
            of barcode that can be generated by the <see cref="T:C1.Win.C1BarCode.C1BarCode"/> control.</para>
            <para>Some types of barcode can be used to represent alphanumeric values, 
            others can only represent numeric values.</para>
            </remarks>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Code39">
            <summary>
            Code 39 is an alpha-numeric encoding also known as 3 of 9 and LOGMARS.
            This was the first alphanumeric symbology developed, and is one of the
            most widely used encodings.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Code93">
            <summary>
            Code 93 is an alpha-numeric encoding that is slightly denser than code 39.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Code128">
            <summary>
            Code 128 is a very high density alpha-numeric bar code. It will use the 
            least amount of space of any current 1-D symbology for symbols with 6 
            characters or more. 
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.CodeI2of5">
            <summary>
            Code I2of5 is a numeric encoding. The symbol can be as long as necessary 
            to store the encoded data.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Codabar">
            <summary>
            Codabar may encode 16 different characters (0 through 9 plus -$:/.+), 
            plus an additional 4 start/stop characters (A through D). Codabar
            is used by some US blood banks, photo labs, and on FedEx air bills. 
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.PostNet">
            <summary>
            PostNet is a numeric encoding used by the US postal service. It differs 
            from most others in that it is based on the height of the bars rather than
            on their width.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Ean13">
            <summary>
            EAN-13 was implemented by the International Article Numbering Association (EAN)
            in Europe. EAN-13 encodes a 12-digit code that consists of a 2 digit system code
            followed by a 5 digit manufacturer code and a 5-digit product code. The 12-digit 
            code is followed by a checksum digit (automatically added by the control).
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Ean8">
            <summary>
            EAN-8 provides a short barcode for small packages. It encodes a 7-digit
            code that consists of a 2 or 3 digit system code followed by a 4 or 5
            digit product code. The 7-digit code is followed by a checksum digit
            (automatically added by the control).
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.UpcA">
            <summary>
            UPC-A is the common encoding you will find on virtually every consumer good on 
            the shelves of your local supermarket, as well as books, magazines, and newspapers.
            It is similar to EAN-13, and encodes 11 digits of numeric data along with a trailing 
            check digit. The first digit determines the number system, followed by a 5-digit
            manufacturer code, a 5-digit product code, and the check digit.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.UpcE">
            <summary>
            <para>UPC-E is a variation of UPC-A which allows for a more compact barcode by eliminating 
            "extra" zeros. Since the resulting UPC-E barcode is about half the size as an UPC-A 
            barcode, it is generally used on products with very small packaging.</para>
            <para>When using the UpcE encoding, set the Text property to an 11-digit string as
            if you were using the UpcA encoding.</para>
            <para>Note that not all UpcA codes can be encoded in UpcE. 
            If the manufacturer code ends with "000", "100", or "200", the product number must be &lt;= 900.
            If the manufacturer code ends with "00" but not with "100", "200", or "300", then the product number must be &lt;= 90.
            If the manufacturer code ends with "0" but not with "00", then the product number must be &lt;= 9.
            If the manufacturer code does not end with "0", then the product number must be between 5 and 9.
            </para>
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.C1BarCode">
            <summary>
            Creates barcode representations of alphanumeric values.
            </summary>
            <remarks>
            <para>To use the C1BarCode control, set the <see cref="P:C1.Win.C1BarCode.C1BarCode.CodeType"/> 
            property to the type of encoding you want to use, then set the 
            <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> property to the value you want to encode.</para>
            <para>The control will show the barcode image. If you want to include the barcode in
            a document, use the <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> property to retrieve a 
            resolution-independent image of the barcode.</para>
            </remarks>
            <example>This sample shows how to use the Text property to encode
            the value "123456" as a Code39-encoded barcode.
            <code>
            c1barcode1.CodeType = CodeTypeEnum.Code39;
            c1barcode1.Text = "123456";
            pictureBox1.Image = c1barcode1.Image;
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1BarCode.C1BarCode.ShowAboutBox">
            <summary>
            Displays the AboutBox for this control.
            </summary>
        </member>
        <member name="M:C1.Win.C1BarCode.C1BarCode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1BarCode.C1BarCode"/> control.
            </summary>
        </member>
        <member name="M:C1.Win.C1BarCode.C1BarCode.GetImage(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets an image of the barcode that represents the value in the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> 
            property, obtained using the encoding specified by the <see cref="P:C1.Win.C1BarCode.C1BarCode.CodeType"/> property.
            </summary>
            <param name="format">An <see cref="T:System.Drawing.Imaging.ImageFormat"/> value that specifies the type of image to be created.</param>
            <returns>An image of the barcode with the specified format.</returns>
            <remarks>
            The <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> property can also be used to obtain an image of the barcode. However,
            it always returns a <see cref="T:System.Drawing.Imaging.Metafile"/> image of a pre-set size and with a transparent 
            background. This method returns solid-background bitmaps.
            </remarks>
        </member>
        <member name="M:C1.Win.C1BarCode.C1BarCode.GetImage(System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32)">
            <summary>
            Gets an image of the barcode that represents the value in the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> 
            property, obtained using the encoding specified by the <see cref="P:C1.Win.C1BarCode.C1BarCode.CodeType"/> property.
            </summary>
            <param name="format">An <see cref="T:System.Drawing.Imaging.ImageFormat"/> value that specifies the type of image to be created.</param>
            <param name="width">The width of the image, in pixels.</param>
            <param name="height">The height of the image, in pixels.</param>
            <returns>An image of the barcode with the specified format and dimensions.</returns>
            <remarks>
            The <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> property can also be used to obtain an image of the barcode. However,
            it always returns a <see cref="T:System.Drawing.Imaging.Metafile"/> image of a pre-set size and with a transparent 
            background. This method returns solid-background bitmaps.
            </remarks>
        </member>
        <member name="M:C1.Win.C1BarCode.C1BarCode.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event.
            </summary>
            <param name="e">A PaintEventArgs that contains the event data.</param>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
            <remarks>
            The background color only applies to the control. The barcode
            image that is available through the <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> 
            property always has a transparent background.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.ForeColor">
            <summary>
            Gets or sets the foreground color for the control.
            </summary>
            <remarks>
            The foreground color applies to the control and also to the barcode
            image that is available through the <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> 
            property.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.Font">
            <summary>
            Gets or sets the Font used to display the value of the Text property.
            </summary>
            <remarks>
            If the <see cref="P:C1.Win.C1BarCode.C1BarCode.ShowText"/> property is set to true, then the value 
            of the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> property is displayed centered along the 
            bottom of the barcode image using the given font.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.ShowText">
            <summary>
            Gets or sets whether the value of the Text property should be displayed along with the barcode image.
            </summary>
            <remarks>
            By default, the control will show only the barcode image. To include a textual
            representation of the value in the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> property, set the 
            <see cref="P:C1.Win.C1BarCode.C1BarCode.ShowText"/> property to True and set the <see cref="P:C1.Win.C1BarCode.C1BarCode.Font"/> property 
            to the Font to be used for the textual display.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.Text">
            <summary>
            Gets or sets the value that is encoded as a barcode image.
            </summary>
            <remarks>
            <para>Some encodings support alpha-numeric values of any length. Others
            are limited to numeric values or to a specific set of characters. 
            See the <see cref="T:C1.Win.C1BarCode.CodeTypeEnum"/> enumeration 
            for details.</para>
            <para>If you use characters that are invalid for the current encoding, the
            control will display a blank image.</para>
            </remarks>
            <example>This sample shows how to use the Text property to encode
            the value "123456" as a Code39-encoded barcode.
            <code>
            c1barcode1.CodeType = CodeTypeEnum.Code39;
            c1barcode1.Text = "123456";
            pictureBox1.Image = c1barcode1.Image;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.CodeType">
            <summary>
            Gets or sets the type of encoding to use when generating the barcode image.
            </summary>
            <remarks>
            The selected encoding is applied to the value stored in the 
            <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> property to generate the barcode image 
            displayed in the control. The barcode image is also available through the 
            <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> property.
            </remarks>
            <example>This sample shows how to use the CodeType property to encode
            the value "123456" as a Code39-encoded barcode.
            <code>
            c1barcode1.CodeType = CodeTypeEnum.Code39;
            c1barcode1.Text = "123456";
            pictureBox1.Image = c1barcode1.Image;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.BarNarrow">
            <summary>
            Gets or sets the width of the narrow bars in screen pixels.
            </summary>
            <remarks>
            By default, narrow bars are one screen pixel wide (1/96") and wide bars 
            are two pixels wide (1/96"). You should never have to change these values,
            they are exposed only in case you need to make adjustments for special
            barcode reader hardware.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.BarWide">
            <summary>
            Gets or sets the width of the wide bars in screen pixels.
            </summary>
            <remarks>
            By default, narrow bars are one screen pixel wide (1/96") and wide bars 
            are two pixels wide (1/96"). You should never have to change these values,
            they are exposed only in case you need to make adjustments for special
            barcode reader hardware.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.BarHeight">
            <summary>
            Gets or sets the height of the bars in screen pixels.
            </summary>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.SizeMode">
            <summary>
            Gets or sets how the barcode image is displayed within the control.
            </summary>
            <remarks>
            <para>This property only affects how the barcode is displayed within
            the control. It has no effect on the actual barcode image, as returned by
            the <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> property.</para>
            <para>In most applications, you will either center or left-align the barcode
            image within the control. Although stretching the image is possible, it may
            make it unreadable for some barcode readers.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.BarDirection">
            <summary>
            Gets or sets the direction of the barcode.
            </summary>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.Image">
            <summary>
            Gets an image of the barcode that represents the value in the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> 
            property, obtained using the encoding specified by the <see cref="P:C1.Win.C1BarCode.C1BarCode.CodeType"/> property.
            </summary>
            <remarks>
            <para>The <b>Image</b> property returns a <see cref="T:System.Drawing.Imaging.Metafile"/> that can be 
            inserted in reports and other documents. If the value stored in the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/>
            property is invalid for the current encoding, the image returned is blank.</para>
            <para>Although the barcode image returned by the control is scalable, the default
            size is optimal for common barcode readers. Keep in mind that if you stretch
            the image and make it very large or very small, it may become unreadable to
            some readers.</para>
            <para>The metafile image has a transparent background and therefore cannot be 
            easily converted to a solid-background bitmap. To obtain a <see cref="T:System.Drawing.Bitmap"/> 
            image of the barcode, use the <see cref="M:C1.Win.C1BarCode.C1BarCode.GetImage(System.Drawing.Imaging.ImageFormat)"/> method instead.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.EncodingException">
            <summary>
            Gets the <see cref="T:System.Exception"/> that prevented the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> from being encoded.
            </summary>
            <remarks>
            <para>Most encodings have limitations that determine what type of text it can represent. For example,
            some are numeric-only and some require text of a specific length.</para>
            <para>If the value of the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> property cannot be represented using the current
            <see cref="P:C1.Win.C1BarCode.C1BarCode.CodeType"/>, then no bar code will be generated and the control will remain blank.</para>
            <para>In this case, the <b>EncodingException</b> property returns details about the exception
            that prevented the bar code from being generated.</para>
            </remarks>
            <example>
            The code below sets the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> property and shows a message in case any errors were
            detected:
            <code>
            c1BarCode1.Text = textBox1.Text;
            label1.Text = c1BarCode1.EncodingException == null 
              ? string.Empty 
              : c1BarCode1.EncodingException.Message;
            </code>
            </example>
        </member>
        <member name="T:C1.Win.C1BarCode.Encoder128">
            <summary>
            Encoder128
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderBase">
            <summary>
            EncoderBase
            Base class for 1-d barcode encoders
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.Encoder39">
            <summary>
            Encoder39
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.Encoder93">
            <summary>
            Encoder93
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderCodabar">
            <summary>
            EncoderCodabar
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderEan13">
            <summary>
            EncoderEan13
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderEan8">
            <summary>
            EncoderEan8
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderI2of5">
            <summary>
            EncoderI2of5
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderPostNet">
            <summary>
            EncoderPostNET
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderUpcA">
            <summary>
            EncoderUpcA
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderUpcE">
            <summary>
            EncoderUpcE
            </summary>
        </member>
        <member name="F:C1.Util.Licensing.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProviderInfo">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:C1.Util.Licensing.LicenseInfo"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            LicenseInfo _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Nag(System.Type,C1.Util.Licensing.LicenseInfo,System.Boolean)">
            <summary>
            Nag user by showing AboutBox with license information.
            Show it only once per day per assembly.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="li"><see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</param>
            <param name="designTime">Whether we're running at design or run time.</param>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Reflection.Assembly,System.String)">
            <summary>
            Version of Validate used by constructors that take runtime keys.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object.</param>
            <param name="callingAsm">Assembly that contains the owner licensed control.</param>
            <param name="runtimeKey">Any valid C1 runtime key.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the runtime key.</returns>
            <remarks>
            <para>This allows a licensed C1 class to create other C1 objects bypassing 
            license verification for the child objects.</para>
            <para>For extra safety, we check that the owner object is defined in an assembly
            the contains a 'C1ProductInfo' attribute.</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateDesigntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Design time validation. Looks for a license in the registry and saves it in the
            provided <see cref="T:System.ComponentModel.LicenseContext"/>.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
            <remarks>
            Call this method from application-type products (that always require a license to be
            installed in the registry). In this case, the <paramref name="context"/> parameter 
            should be set to null.
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateRuntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Runtime validation.
            Looks for a runtime key stored in the current application's resources.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="T:C1.Util.Licensing.LicenseInfo">
            <summary>
            Contains information about a license stored in an application.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus,C1.Util.Licensing.ProductLicense)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.LicenseStatus">
            <summary>
            Gets or sets the status of this license (valid, expired, unlicensed).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.License">
            <summary>
            Gets or sets the <see cref="T:C1.Util.Licensing.ProductLicense"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.Type">
            <summary>
            Gets or sets the <see cref="P:C1.Util.Licensing.LicenseInfo.Type"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysElapsed">
            <summary>
            Gets the number of evaluation days elapsed.
            Returns -1 for valid licenses.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysLeft">
            <summary>
            Gets the number of evaluation days still left.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.ShouldNag">
            <summary>
            Gets or sets a value that determines whether the caller should
            nag the user. This is the case when the component/control is 
            not licensed, but is not running in interactive mode. So we can't
            show a dialog and the caller is supposed to nag some other way
            (typically by adding watermarks to the UI or output).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsValid">
            <summary>
            Gets a value that determines whether the license found is valid.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsExpired">
            <summary>
            Gets a value that determines whether the license found is expired.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsLocalHost">
            <summary>
            Gets a value that determines whether the component is running under
            localhost and therefore should not nag the user with alert dialogs.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.SafeLicenseContext">
            <summary>
            
            Provides a version of GetSavedLicenseKey that doesn't require
            special permissions.
            
            The code was mostly copied from the .NET framework, but then changed 
            in a few places to require fewer permissions (assembly name, file io, 
            etc). 
            
            The main change is the use of a custom deserializer to read Hashtable 
            objects instead of the original BinaryFormatter, which requires
            permissions.
            
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AboutNameAttribute">
            <summary>
            Attribute used to specify the product name shown on the About Box.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1Localizer">
            <summary>
            Localization tables and methods for looking up localized strings.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProductLicense">
            <summary>
            Represents a license for a product (e.g. C1BarCode, C1Studio Enterprise).
            
            Provides methods for:
            - generating new license keys (administrative task)
            - checking license key validity (used by installer and products)
            - generating and checking runtime keys (used by products)
            - installing/uninstalling licenses (used by installer)
            
            The install/uninstall code requires elevated permissions, and is
            used only by setups and utilities (not by controls). The code is 
            implemented in the ProductLicense.Installer.cs, which controls should
            not include since it won't be useful to them.
            
            When a product is sold, we send the user a license KEY. The user installs
            a license on his machine by providing his name, his company name, and the 
            key.
            
            The <see cref="P:C1.Util.Licensing.ProductLicense.Key"/> is a string in the following format:
            
                AAQYYCC-XX-NNNNNN-DD-DZZZZZZ
                
            Where:
            
                AA:     Product code (should match one of the products in the 
                        product catalog (see ProductInformation.GetProductCatalog()).
                Q:      Quarter when the license key was issued (1, 2, or 3)
                YY:     Year when the license key was issued (e.g., 10 for 2010)
                CC:     Order code, two chars that indicate whether this is a 
                        new sale, upgrade, renewal, special offer, etc.
                XX:     Hash code to ensure key validity.
                NNNNNN: Unique serial number.
                DDD:    Vendor code, three chars
                ZZZZZZ: Combination of random numbers for uniqueness and extra hash.
                
            </summary>
        </member>
        <member name="T:C1.Win.Localization.EndUserLocalizeOptionsAttribute">
            <summary>
            Allows to redefine default enduser localize options for
            property, field or class.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Properties">
            <summary>
            Defines the list of properties that should be localized.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Exclude">
            <summary>
            If true then class, property or field will be not displayed for 
            enduser localization.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description">
            <summary>
            Gets the description of string that will be displayed in the
            end user localizer in design-time.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.StringsType">
            <summary>
            Gets or sets type derived from <see cref="!:C1.C1Preview.Strings"/>
            providing string used to localize <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Key">
            <summary>
            Gets or sets resource key containing localized string for <see cref="P:C1.Win.Localization.EndUserLocalizeOptionsAttribute.Description"/>.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="T:C1.Win.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetC1BuiltinResourceStream(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Returns ResourceStream for "official" resources
            that provided only by C1, typicallly those resources contains
            design-time strings.
            Those resources can be only in main control assembly like C1.C1Preview.2.dll 
            and name of resource should have following format:
            CulturePrefix.StringsTypeName
            for example:
            ja.C1.C1Preview.Design.DesignStrings.resx
            </summary>
            <param name="resourceName"></param>
            <param name="assembly"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Win.Localization.StringsManager.GetParentCulture(System.String)">
            <summary>
            Returns the parent of the CultureInfo passed in. Differs from ci.Parent
            in that while ci can be equal to ci.Parent, this method it never returns
            the passed ci itself, rather it would return null.
            Also this function has special handling for chinese culture.
            Under NET2 it returns "zh" culture name for
            neutral "zh-Hans" and "zh-Hant" chinese cultures, under
            NET2 "zh" is not exists.
            </summary>
            <param name="ci">The culture info to get parent for.</param>
            <returns>The parent of the culture info, or null.</returns>
        </member>
    </members>
</doc>
